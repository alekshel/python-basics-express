"""
Implement the functions below according to the specification. Remove the `pass` statements and add your code.

Functions:
    1. fibonacci(n): list of first n Fibonacci numbers (recursive).
    2. factorial(n): n! (recursive).
    3. apply(func, seq, /, *, reverse=False): apply function to each element of seq; reverse result if needed.
    4. print_table(k, row_func, /, *, title="Table"): print k lines using row_func.

Main flow:
    • Read integer k from stdin (input()).
    • Print a "Fibonacci" table with the first k numbers.
    • Print a "Factorials" table.
    • Print result of apply(factorial, range(1, k+1), reverse=True).
"""

from typing import Callable, Iterable, List, Any


def fibonacci(n: int) -> List[int]:
    """Return a list with the first *n* Fibonacci numbers (recursive)."""
    pass


def factorial(n: int) -> int:
    """Return the factorial of *n* using recursion."""
    pass


def apply(
    func: Callable[[int], Any], seq: Iterable[int], /, *, reverse: bool = False
) -> List[Any]:
    """
    Apply *func* to every element of *seq* and return the results.
    If *reverse* is True, return the list in reverse order.
    """
    pass


def print_table(
    k: int, row_func: Callable[[int], Any], /, *, title: str = "Table"
) -> None:
    """Print *k* rows generated by *row_func(i)*. The first column is the index starting from 1."""
    pass


def main() -> None:
    """Entry point for simple CLI testing."""
    pass


if __name__ == "__main__":
    main()
